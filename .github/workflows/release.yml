name: Android Release Pipeline 
 
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g. 1.0.0)'
        required: true 
        type: string
      release_notes:
        description: 'Release description (Markdown supported)'
        required: false 
        type: string 
 
env:
  BUILD_TOOLS: "34.0.0"
  COMPILE_SDK: 34
 
jobs:
  build:
    name: Build and Sign 
    runs-on: ubuntu-latest
    environment: production 
 
    steps:
      # 基础环境设置 
      - name: Checkout code 
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
 
      - name: Set up JDK 17
        uses: actions/setup-java@v4 
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle' 
 
      - name: Setup Android 
        uses: android-actions/setup-android@v3 
        with:
          build-tools: ${{ env.BUILD_TOOLS }}
          sdk: ${{ env.COMPILE_SDK }}
 
      # 签名配置验证 
      - name: Validate Secrets
        run: |
          REQUIRED_SECRETS=(
            "KEYSTORE_BASE64"
            "KEYSTORE_PASSWORD" 
            "KEY_ALIAS"
            "KEY_PASSWORD"
          )
          
          for secret in "${REQUIRED_SECRETS[@]}"; do
            if [ -z "${!secret}" ]; then
              echo "::error::Missing required secret: $secret"
              exit 1
            fi 
          done
          
          echo "All secrets are present"
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
 
      # 密钥库处理 
      - name: Prepare Keystore
        run: |
          echo "Creating keystore directory..."
          mkdir -p app/signing
          
          echo "Decoding base64 keystore..."
          echo "$KEYSTORE_BASE64" | base64 -di > app/signing/release.jks 
          
          echo "Verifying keystore..."
          keytool -list \
            -keystore app/signing/release.jks  \
            -storepass "$KEYSTORE_PASSWORD" \
            -alias "$KEY_ALIAS" \
            || (echo "::error::Invalid keystore configuration"; exit 1)
          
          echo "Keystore is valid"
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
 
      # 构建过程 
      - name: Build Release APK 
        run: |
          ./gradlew assembleRelease \
            -Psigning.keystore.file="signing/release.jks"  \
            -Psigning.keystore.password="$KEYSTORE_PASSWORD"  \
            -Psigning.key.alias="$KEY_ALIAS"  \
            -Psigning.key.password="$KEY_PASSWORD"  \
            --no-daemon \
            --stacktrace 
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
 
      # 产物处理
      - name: Prepare Artifacts
        run: |
          mkdir -p artifacts 
          
          # 主APK 
          cp app/build/outputs/apk/release/app-release.apk  \
            "artifacts/mytv-android-${{ inputs.version  }}.apk"
            
          # 映射文件（用于混淆反解）
          [ -f app/build/outputs/mapping/release/mapping.txt  ] && \
            cp app/build/outputs/mapping/release/mapping.txt  \
              "artifacts/mapping-${{ inputs.version  }}.txt"
              
          # 构建报告 
          ./gradlew buildReport > artifacts/build-report.log  2>&1 || true 
 
      # 发布到GitHub Releases 
      - name: Publish Release 
        uses: softprops/action-gh-release@v1 
        with:
          tag_name: "v${{ inputs.version  }}"
          name: "MyTV v${{ inputs.version  }}"
          body: |
            ${{ inputs.release_notes  || 'Production release' }}
            ### Build Info 
            - Date: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
            - Commit: ${{ github.sha  }}
          files: |
            artifacts/*.apk
            artifacts/mapping-*.txt
            artifacts/build-report.log 
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
